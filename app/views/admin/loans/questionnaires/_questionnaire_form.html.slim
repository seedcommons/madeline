.questionnaire-form
  // Set summary view default value
  - summary_view = summary_view || false

  / We manually specify the form URL here because we need to pass the filter QS param
  / in case the form validation fails and the ResponseSetsController has to render.
  = simple_form_for([:admin, response_set],
      html: { \
        class: 'form-horizontal',
      },
      wrapper: :horizontal_form_condensed,
      defaults: { \
        input_html: {class: 'form-element form-control'},
      },
    ) do |f|

    = error_notification(f)

    - if @conflict
      .alert.alert-danger
        = t('loan.response_set.conflicting_changes_html',
            link: admin_loan_tab_path(@loan, tab: 'questions', qset: response_set.question_set_id),
            updater: @response_set_from_db[:updater].try(:name) || "[#{t(:unknown)}]",
            updated_at: ldate(@response_set_from_db[:updated_at], format: :long))
        / `new_lock_version` is the lock_version of the updated record in the db. This is here in
        / case someone made further changes since the warning was displayed.
        = hidden_field_tag(:new_lock_version, @response_set_from_db[:lock_version])
        / Hide buttons for conflict on create - optimistic locking doesn't really work on create
        - unless response_set.new_record?
          .buttons
            => f.submit t('loan.response_set.overwrite_changes'), name: 'overwrite', class: 'btn btn-default'
            => f.submit t('loan.response_set.discard_reload'), name: 'discard', class: 'btn btn-default'

    = f.hidden_field(:loan_id)
    = f.hidden_field(:question_set_id)
    = f.hidden_field(:lock_version)

    - unless @print_view
      .jqtree data-data=@questions_json id="jqtree"

    .actions.form-element.larger#edit-bar
      h3.now-editing.custom_dark_accent
        = fa_icon "exclamation-circle"
        = t("questions.currently_editing")
      p#unsaved-changes-warning.unsaved-changes-warning.hidden = t("loan.pending_changes_short")
      a.btn.btn-default.show-action.cancel-edit = t(:cancel)
      = f.submit t("loan.save_responses"), class: 'update-action btn btn-primary'
    .clearfix

  / Render form fields outside form so they don't get double submitted after being
  / copied into the jqtree
  = simple_fields_for(response_set, defaults: {input_html: {class: 'form-element form-control'}}) do |f|
    - if summary_view
      = render "admin/loans/questionnaires/summary_header"
      = render "admin/loans/questionnaires/summary_group",
        f: f, response_set: response_set, group: @root, parents: [], indices: []
    - else
      - editing_allowed = policy(@loan).update?
      = render "admin/loans/questionnaires/questionnaire_group",
        f: f, response_set: response_set, group: @root, parents: [], indices: [],  editing_allowed: editing_allowed
