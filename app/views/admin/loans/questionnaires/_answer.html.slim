= f.fields_for :answers, answer do |answer_form_fields|
  = p
    = "Answer id #{answer.present? ? answer.id: "none"}; Question id: #{question.id}; Answer question id: #{answer.present? ? answer.question.id : "none"}"
  = answer_form_fields.input_field :question_id, value:question.id, hidden: true
  .not-applicable
    - if answer.not_applicable?
      .view-element.answer = t("loan.not_applicable")
    .form-element
      = answer_form_fields.input_field :not_applicable, value: answer.not_applicable, inline_label: "Not Applicable", checked_value: "true", unchecked_value: "false"

  - if question.boolean?
    - unless answer.boolean_data.nil? || answer.not_applicable?
      .view-element.answer = t(answer.boolean_data ? "reply_true" : "reply_false")
    .form-element
      = answer_form_fields.input_field :boolean_data, as: :select,
    selected: (answer.boolean_data.nil? ? nil : answer.boolean_data), collection: %i(true false),
    label_method: ->(i) { t("reply_#{i}") }, prompt: I18n.t("select_prompt"),
    data: {boolean: true}


  - if question.has_number?
    - if answer && answer.number.present? && !answer.not_applicable?
      - display_value = display_value_for_number(question, answer: answer, response_set: response_set)
      .view-element.answer.hidden-print = display_value
      .view-element.answer.numerical-answer.visible-print-block
        table.table class=(@previous_number_table ? 'sibling-table' : '')
          caption.sr-only
            = t("questions.table.caption", number: question.full_number)
          tr
            td.question-number = question.full_number
            td.number-question-label = question.label
            td.number-response = display_value
    = answer_form_fields.input_field :numeric_data, as: :decorated_numeric,
      value: (answer.present? ? answer.number : nil), prefix: prefix(question, response_set), postfix: postfix(question, response_set)


  - if question.has_text?
    / Display response as rich text.

    / Specify which html tags are allowed.
    - tags = %w(table tbody tr td b i u ol ul li p br img a iframe)

    / Specify which attributes are allowed.
    - attrs = %w(class style src data-filename _moz_resizing href target frameborder width height)

    a.form-element.edit-rt-response.edit-action(aria-label="#{t("questions.edit_rich_text")}")
      =t("questions.edit_rich_text")

    - answer_content = answer.present? ? answer.text : nil
    - if answer_content && !answer.not_applicable?
      .view-element.answer = sanitize(answer_content, tags: tags, attributes: attrs)

    .form-element.answer.rt-answer = sanitize(answer_content, tags: tags, attributes: attrs)
    .form-element.answer.no-response class=(answer_content.present? ? "" : "hidden")
       = t("loan.no_answer")

       / attribute_sym is the internal name
       / does the [text] create something like nested attrs?
    = answer_form_fields.input_field :text_data,
      value: sanitize(answer_content, tags: tags, attributes: attrs), as: :hidden, class: "rt-response"

  hr class="solid"
